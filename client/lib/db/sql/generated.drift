import 'generated.dart';

-- Tables --

CREATE TABLE "users" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "username" TEXT,
    "email" TEXT NOT NULL,
    "emailVisibility" BOOLEAN,
    "verified" BOOLEAN,
    "name" TEXT,
    "avatar" TEXT
) WITH User;

CREATE TABLE "albums" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "name" TEXT NOT NULL
) WITH Album;

CREATE TABLE "album_tracks" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "album_id" TEXT NOT NULL REFERENCES "albums" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "order" REAL NOT NULL
) WITH AlbumTrack;

CREATE TABLE "user_playlists" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "name" TEXT NOT NULL,
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE
) WITH UserPlaylist;

CREATE TABLE "user_playlist_items" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "playlist_id" TEXT NOT NULL REFERENCES "user_playlists" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "order" REAL NOT NULL
) WITH UserPlaylistItem;

CREATE TABLE "songs" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "name" TEXT NOT NULL,
    "download_link" TEXT,
    "artist_id" TEXT REFERENCES "artists" (id)
) WITH Song;

CREATE TABLE "artists" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "username" TEXT,
    "email" TEXT NOT NULL,
    "emailVisibility" BOOLEAN,
    "verified" BOOLEAN
) WITH Artist;

CREATE TABLE "user_activity" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "user_id" TEXT NOT NULL REFERENCES "users" (id),
    "collection_id" TEXT NOT NULL,
    "record_id" TEXT NOT NULL,
    "record_data" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "private" BOOLEAN
) WITH UserActivity;

CREATE TABLE "deleted_records" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "collection_id" TEXT NOT NULL,
    "record_id" TEXT NOT NULL,
    "record_data" TEXT NOT NULL
) WITH DeletedRecord;

CREATE TABLE "user_liked_songs" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE
) WITH UserLikedSong;

CREATE TABLE "user_followers" (
    "id" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true),
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "target_user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE
) WITH UserFollower;

-- Indexes --

CREATE INDEX "idx_wrCdI3h" ON "user_activity" (
  "collection_id",
  "record_id"
);

-- Queries --

usersGetAll:
SELECT * FROM "users";

usersGetOne:
SELECT * FROM "users"
WHERE id = :id;

usersHardDeleteOne:
DELETE FROM "users"
WHERE id = :id;

usersSoftDeleteOne:
UPDATE "users" SET
deleted = true, synced = false
WHERE id = :id;

usersRestoreSoftDeleteOne:
UPDATE "users" SET
deleted = false, synced = false
WHERE id = :id;

usersHardDeleteMulti:
DELETE FROM "users"
WHERE id IN :ids;

usersSoftDeleteMulti:
UPDATE "users" SET
deleted = true, synced = false
WHERE id IN :ids;

usersRestoreSoftDeleteMulti:
UPDATE "users" SET
deleted = false, synced = false
WHERE id IN :ids;

usersSetSyncStatusOne:
UPDATE "users" SET
synced = :value
WHERE id = :id;

usersSetSyncStatusMulti:
UPDATE "users" SET
synced = :value
WHERE id IN :ids;

usersInsert:
INSERT INTO "users" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "username",
  "email",
  "emailVisibility",
  "verified",
  "name",
  "avatar"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :username,
  :email,
  :emailVisibility,
  :verified,
  :name,
  :avatar
) RETURNING *;

usersInsertRecord(:data AS TEXT):
INSERT INTO "users" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "username",
  "email",
  "emailVisibility",
  "verified",
  "name",
  "avatar"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.username'),
  json_extract(:data, '$.email'),
  json_extract(:data, '$.emailVisibility'),
  json_extract(:data, '$.verified'),
  json_extract(:data, '$.name'),
  json_extract(:data, '$.avatar')
) RETURNING *;

usersUpdate:
UPDATE "users" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "username" = :username,
  "email" = :email,
  "emailVisibility" = :emailVisibility,
  "verified" = :verified,
  "name" = :name,
  "avatar" = :avatar
WHERE id = :id;

usersUpdateRecord(:data AS TEXT):
UPDATE "users" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "username" = json_extract(:data, '$.username'),
  "email" = json_extract(:data, '$.email'),
  "emailVisibility" = json_extract(:data, '$.emailVisibility'),
  "verified" = json_extract(:data, '$.verified'),
  "name" = json_extract(:data, '$.name'),
  "avatar" = json_extract(:data, '$.avatar')
WHERE id = json_extract(:data, '$.id');

albumsGetAll:
SELECT * FROM "albums";

albumsGetOne:
SELECT * FROM "albums"
WHERE id = :id;

albumsGetUnsynced:
SELECT * FROM "albums"
WHERE synced = false;

albumsGetFreshest:
SELECT * FROM "albums"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

albumsHardDeleteOne:
DELETE FROM "albums"
WHERE id = :id;

albumsSoftDeleteOne:
UPDATE "albums" SET
deleted = true, synced = false
WHERE id = :id;

albumsRestoreSoftDeleteOne:
UPDATE "albums" SET
deleted = false, synced = false
WHERE id = :id;

albumsHardDeleteMulti:
DELETE FROM "albums"
WHERE id IN :ids;

albumsSoftDeleteMulti:
UPDATE "albums" SET
deleted = true, synced = false
WHERE id IN :ids;

albumsRestoreSoftDeleteMulti:
UPDATE "albums" SET
deleted = false, synced = false
WHERE id IN :ids;

albumsSetSyncStatusOne:
UPDATE "albums" SET
synced = :value
WHERE id = :id;

albumsSetSyncStatusMulti:
UPDATE "albums" SET
synced = :value
WHERE id IN :ids;

albumsInsert:
INSERT INTO "albums" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :name
) RETURNING *;

albumsInsertRecord(:data AS TEXT):
INSERT INTO "albums" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.name')
) RETURNING *;

albumsUpdate:
UPDATE "albums" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "name" = :name
WHERE id = :id;

albumsUpdateRecord(:data AS TEXT):
UPDATE "albums" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "name" = json_extract(:data, '$.name')
WHERE id = json_extract(:data, '$.id');

albumTracksGetAll:
SELECT * FROM "album_tracks";

albumTracksGetOne:
SELECT * FROM "album_tracks"
WHERE id = :id;

albumTracksGetUnsynced:
SELECT * FROM "album_tracks"
WHERE synced = false;

albumTracksGetFreshest:
SELECT * FROM "album_tracks"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

albumTracksHardDeleteOne:
DELETE FROM "album_tracks"
WHERE id = :id;

albumTracksSoftDeleteOne:
UPDATE "album_tracks" SET
deleted = true, synced = false
WHERE id = :id;

albumTracksRestoreSoftDeleteOne:
UPDATE "album_tracks" SET
deleted = false, synced = false
WHERE id = :id;

albumTracksHardDeleteMulti:
DELETE FROM "album_tracks"
WHERE id IN :ids;

albumTracksSoftDeleteMulti:
UPDATE "album_tracks" SET
deleted = true, synced = false
WHERE id IN :ids;

albumTracksRestoreSoftDeleteMulti:
UPDATE "album_tracks" SET
deleted = false, synced = false
WHERE id IN :ids;

albumTracksSetSyncStatusOne:
UPDATE "album_tracks" SET
synced = :value
WHERE id = :id;

albumTracksSetSyncStatusMulti:
UPDATE "album_tracks" SET
synced = :value
WHERE id IN :ids;

albumTracksInsert:
INSERT INTO "album_tracks" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "album_id",
  "song_id",
  "order"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :albumId,
  :songId,
  :order
) RETURNING *;

albumTracksInsertRecord(:data AS TEXT):
INSERT INTO "album_tracks" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "album_id",
  "song_id",
  "order"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.album_id'),
  json_extract(:data, '$.song_id'),
  json_extract(:data, '$.order')
) RETURNING *;

albumTracksUpdate:
UPDATE "album_tracks" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "album_id" = :albumId,
  "song_id" = :songId,
  "order" = :order
WHERE id = :id;

albumTracksUpdateRecord(:data AS TEXT):
UPDATE "album_tracks" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "album_id" = json_extract(:data, '$.album_id'),
  "song_id" = json_extract(:data, '$.song_id'),
  "order" = json_extract(:data, '$.order')
WHERE id = json_extract(:data, '$.id');

userPlaylistsGetAll:
SELECT * FROM "user_playlists";

userPlaylistsGetOne:
SELECT * FROM "user_playlists"
WHERE id = :id;

userPlaylistsGetUnsynced:
SELECT * FROM "user_playlists"
WHERE synced = false;

userPlaylistsGetFreshest:
SELECT * FROM "user_playlists"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

userPlaylistsHardDeleteOne:
DELETE FROM "user_playlists"
WHERE id = :id;

userPlaylistsSoftDeleteOne:
UPDATE "user_playlists" SET
deleted = true, synced = false
WHERE id = :id;

userPlaylistsRestoreSoftDeleteOne:
UPDATE "user_playlists" SET
deleted = false, synced = false
WHERE id = :id;

userPlaylistsHardDeleteMulti:
DELETE FROM "user_playlists"
WHERE id IN :ids;

userPlaylistsSoftDeleteMulti:
UPDATE "user_playlists" SET
deleted = true, synced = false
WHERE id IN :ids;

userPlaylistsRestoreSoftDeleteMulti:
UPDATE "user_playlists" SET
deleted = false, synced = false
WHERE id IN :ids;

userPlaylistsSetSyncStatusOne:
UPDATE "user_playlists" SET
synced = :value
WHERE id = :id;

userPlaylistsSetSyncStatusMulti:
UPDATE "user_playlists" SET
synced = :value
WHERE id IN :ids;

userPlaylistsInsert:
INSERT INTO "user_playlists" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name",
  "user_id"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :name,
  :userId
) RETURNING *;

userPlaylistsInsertRecord(:data AS TEXT):
INSERT INTO "user_playlists" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name",
  "user_id"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.name'),
  json_extract(:data, '$.user_id')
) RETURNING *;

userPlaylistsUpdate:
UPDATE "user_playlists" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "name" = :name,
  "user_id" = :userId
WHERE id = :id;

userPlaylistsUpdateRecord(:data AS TEXT):
UPDATE "user_playlists" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "name" = json_extract(:data, '$.name'),
  "user_id" = json_extract(:data, '$.user_id')
WHERE id = json_extract(:data, '$.id');

userPlaylistItemsGetAll:
SELECT * FROM "user_playlist_items";

userPlaylistItemsGetOne:
SELECT * FROM "user_playlist_items"
WHERE id = :id;

userPlaylistItemsGetUnsynced:
SELECT * FROM "user_playlist_items"
WHERE synced = false;

userPlaylistItemsGetFreshest:
SELECT * FROM "user_playlist_items"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

userPlaylistItemsHardDeleteOne:
DELETE FROM "user_playlist_items"
WHERE id = :id;

userPlaylistItemsSoftDeleteOne:
UPDATE "user_playlist_items" SET
deleted = true, synced = false
WHERE id = :id;

userPlaylistItemsRestoreSoftDeleteOne:
UPDATE "user_playlist_items" SET
deleted = false, synced = false
WHERE id = :id;

userPlaylistItemsHardDeleteMulti:
DELETE FROM "user_playlist_items"
WHERE id IN :ids;

userPlaylistItemsSoftDeleteMulti:
UPDATE "user_playlist_items" SET
deleted = true, synced = false
WHERE id IN :ids;

userPlaylistItemsRestoreSoftDeleteMulti:
UPDATE "user_playlist_items" SET
deleted = false, synced = false
WHERE id IN :ids;

userPlaylistItemsSetSyncStatusOne:
UPDATE "user_playlist_items" SET
synced = :value
WHERE id = :id;

userPlaylistItemsSetSyncStatusMulti:
UPDATE "user_playlist_items" SET
synced = :value
WHERE id IN :ids;

userPlaylistItemsInsert:
INSERT INTO "user_playlist_items" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "playlist_id",
  "user_id",
  "song_id",
  "order"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :playlistId,
  :userId,
  :songId,
  :order
) RETURNING *;

userPlaylistItemsInsertRecord(:data AS TEXT):
INSERT INTO "user_playlist_items" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "playlist_id",
  "user_id",
  "song_id",
  "order"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.playlist_id'),
  json_extract(:data, '$.user_id'),
  json_extract(:data, '$.song_id'),
  json_extract(:data, '$.order')
) RETURNING *;

userPlaylistItemsUpdate:
UPDATE "user_playlist_items" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "playlist_id" = :playlistId,
  "user_id" = :userId,
  "song_id" = :songId,
  "order" = :order
WHERE id = :id;

userPlaylistItemsUpdateRecord(:data AS TEXT):
UPDATE "user_playlist_items" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "playlist_id" = json_extract(:data, '$.playlist_id'),
  "user_id" = json_extract(:data, '$.user_id'),
  "song_id" = json_extract(:data, '$.song_id'),
  "order" = json_extract(:data, '$.order')
WHERE id = json_extract(:data, '$.id');

songsGetAll:
SELECT * FROM "songs";

songsGetOne:
SELECT * FROM "songs"
WHERE id = :id;

songsGetUnsynced:
SELECT * FROM "songs"
WHERE synced = false;

songsGetFreshest:
SELECT * FROM "songs"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

songsHardDeleteOne:
DELETE FROM "songs"
WHERE id = :id;

songsSoftDeleteOne:
UPDATE "songs" SET
deleted = true, synced = false
WHERE id = :id;

songsRestoreSoftDeleteOne:
UPDATE "songs" SET
deleted = false, synced = false
WHERE id = :id;

songsHardDeleteMulti:
DELETE FROM "songs"
WHERE id IN :ids;

songsSoftDeleteMulti:
UPDATE "songs" SET
deleted = true, synced = false
WHERE id IN :ids;

songsRestoreSoftDeleteMulti:
UPDATE "songs" SET
deleted = false, synced = false
WHERE id IN :ids;

songsSetSyncStatusOne:
UPDATE "songs" SET
synced = :value
WHERE id = :id;

songsSetSyncStatusMulti:
UPDATE "songs" SET
synced = :value
WHERE id IN :ids;

songsInsert:
INSERT INTO "songs" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name",
  "download_link",
  "artist_id"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :name,
  :downloadLink,
  :artistId
) RETURNING *;

songsInsertRecord(:data AS TEXT):
INSERT INTO "songs" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "name",
  "download_link",
  "artist_id"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.name'),
  json_extract(:data, '$.download_link'),
  json_extract(:data, '$.artist_id')
) RETURNING *;

songsUpdate:
UPDATE "songs" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "name" = :name,
  "download_link" = :downloadLink,
  "artist_id" = :artistId
WHERE id = :id;

songsUpdateRecord(:data AS TEXT):
UPDATE "songs" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "name" = json_extract(:data, '$.name'),
  "download_link" = json_extract(:data, '$.download_link'),
  "artist_id" = json_extract(:data, '$.artist_id')
WHERE id = json_extract(:data, '$.id');

artistsGetAll:
SELECT * FROM "artists";

artistsGetOne:
SELECT * FROM "artists"
WHERE id = :id;

artistsHardDeleteOne:
DELETE FROM "artists"
WHERE id = :id;

artistsSoftDeleteOne:
UPDATE "artists" SET
deleted = true, synced = false
WHERE id = :id;

artistsRestoreSoftDeleteOne:
UPDATE "artists" SET
deleted = false, synced = false
WHERE id = :id;

artistsHardDeleteMulti:
DELETE FROM "artists"
WHERE id IN :ids;

artistsSoftDeleteMulti:
UPDATE "artists" SET
deleted = true, synced = false
WHERE id IN :ids;

artistsRestoreSoftDeleteMulti:
UPDATE "artists" SET
deleted = false, synced = false
WHERE id IN :ids;

artistsSetSyncStatusOne:
UPDATE "artists" SET
synced = :value
WHERE id = :id;

artistsSetSyncStatusMulti:
UPDATE "artists" SET
synced = :value
WHERE id IN :ids;

artistsInsert:
INSERT INTO "artists" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "username",
  "email",
  "emailVisibility",
  "verified"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :username,
  :email,
  :emailVisibility,
  :verified
) RETURNING *;

artistsInsertRecord(:data AS TEXT):
INSERT INTO "artists" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "username",
  "email",
  "emailVisibility",
  "verified"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.username'),
  json_extract(:data, '$.email'),
  json_extract(:data, '$.emailVisibility'),
  json_extract(:data, '$.verified')
) RETURNING *;

artistsUpdate:
UPDATE "artists" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "username" = :username,
  "email" = :email,
  "emailVisibility" = :emailVisibility,
  "verified" = :verified
WHERE id = :id;

artistsUpdateRecord(:data AS TEXT):
UPDATE "artists" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "username" = json_extract(:data, '$.username'),
  "email" = json_extract(:data, '$.email'),
  "emailVisibility" = json_extract(:data, '$.emailVisibility'),
  "verified" = json_extract(:data, '$.verified')
WHERE id = json_extract(:data, '$.id');

userActivityGetAll:
SELECT * FROM "user_activity";

userActivityGetOne:
SELECT * FROM "user_activity"
WHERE id = :id;

userActivityGetUnsynced:
SELECT * FROM "user_activity"
WHERE synced = false;

userActivityGetFreshest:
SELECT * FROM "user_activity"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

userActivityHardDeleteOne:
DELETE FROM "user_activity"
WHERE id = :id;

userActivitySoftDeleteOne:
UPDATE "user_activity" SET
deleted = true, synced = false
WHERE id = :id;

userActivityRestoreSoftDeleteOne:
UPDATE "user_activity" SET
deleted = false, synced = false
WHERE id = :id;

userActivityHardDeleteMulti:
DELETE FROM "user_activity"
WHERE id IN :ids;

userActivitySoftDeleteMulti:
UPDATE "user_activity" SET
deleted = true, synced = false
WHERE id IN :ids;

userActivityRestoreSoftDeleteMulti:
UPDATE "user_activity" SET
deleted = false, synced = false
WHERE id IN :ids;

userActivitySetSyncStatusOne:
UPDATE "user_activity" SET
synced = :value
WHERE id = :id;

userActivitySetSyncStatusMulti:
UPDATE "user_activity" SET
synced = :value
WHERE id IN :ids;

userActivityInsert:
INSERT INTO "user_activity" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "collection_id",
  "record_id",
  "record_data",
  "type",
  "private"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :userId,
  :collectionId,
  :recordId,
  :recordData,
  :type,
  :private
) RETURNING *;

userActivityInsertRecord(:data AS TEXT):
INSERT INTO "user_activity" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "collection_id",
  "record_id",
  "record_data",
  "type",
  "private"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.user_id'),
  json_extract(:data, '$.collection_id'),
  json_extract(:data, '$.record_id'),
  json_extract(:data, '$.record_data'),
  json_extract(:data, '$.type'),
  json_extract(:data, '$.private')
) RETURNING *;

userActivityUpdate:
UPDATE "user_activity" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "user_id" = :userId,
  "collection_id" = :collectionId,
  "record_id" = :recordId,
  "record_data" = :recordData,
  "type" = :type,
  "private" = :private
WHERE id = :id;

userActivityUpdateRecord(:data AS TEXT):
UPDATE "user_activity" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "user_id" = json_extract(:data, '$.user_id'),
  "collection_id" = json_extract(:data, '$.collection_id'),
  "record_id" = json_extract(:data, '$.record_id'),
  "record_data" = json_extract(:data, '$.record_data'),
  "type" = json_extract(:data, '$.type'),
  "private" = json_extract(:data, '$.private')
WHERE id = json_extract(:data, '$.id');

deletedRecordsGetAll:
SELECT * FROM "deleted_records";

deletedRecordsGetOne:
SELECT * FROM "deleted_records"
WHERE id = :id;

deletedRecordsGetUnsynced:
SELECT * FROM "deleted_records"
WHERE synced = false;

deletedRecordsGetFreshest:
SELECT * FROM "deleted_records"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

deletedRecordsHardDeleteOne:
DELETE FROM "deleted_records"
WHERE id = :id;

deletedRecordsSoftDeleteOne:
UPDATE "deleted_records" SET
deleted = true, synced = false
WHERE id = :id;

deletedRecordsRestoreSoftDeleteOne:
UPDATE "deleted_records" SET
deleted = false, synced = false
WHERE id = :id;

deletedRecordsHardDeleteMulti:
DELETE FROM "deleted_records"
WHERE id IN :ids;

deletedRecordsSoftDeleteMulti:
UPDATE "deleted_records" SET
deleted = true, synced = false
WHERE id IN :ids;

deletedRecordsRestoreSoftDeleteMulti:
UPDATE "deleted_records" SET
deleted = false, synced = false
WHERE id IN :ids;

deletedRecordsSetSyncStatusOne:
UPDATE "deleted_records" SET
synced = :value
WHERE id = :id;

deletedRecordsSetSyncStatusMulti:
UPDATE "deleted_records" SET
synced = :value
WHERE id IN :ids;

deletedRecordsInsert:
INSERT INTO "deleted_records" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "collection_id",
  "record_id",
  "record_data"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :collectionId,
  :recordId,
  :recordData
) RETURNING *;

deletedRecordsInsertRecord(:data AS TEXT):
INSERT INTO "deleted_records" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "collection_id",
  "record_id",
  "record_data"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.collection_id'),
  json_extract(:data, '$.record_id'),
  json_extract(:data, '$.record_data')
) RETURNING *;

deletedRecordsUpdate:
UPDATE "deleted_records" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "collection_id" = :collectionId,
  "record_id" = :recordId,
  "record_data" = :recordData
WHERE id = :id;

deletedRecordsUpdateRecord(:data AS TEXT):
UPDATE "deleted_records" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "collection_id" = json_extract(:data, '$.collection_id'),
  "record_id" = json_extract(:data, '$.record_id'),
  "record_data" = json_extract(:data, '$.record_data')
WHERE id = json_extract(:data, '$.id');

userLikedSongsGetAll:
SELECT * FROM "user_liked_songs";

userLikedSongsGetOne:
SELECT * FROM "user_liked_songs"
WHERE id = :id;

userLikedSongsGetUnsynced:
SELECT * FROM "user_liked_songs"
WHERE synced = false;

userLikedSongsGetFreshest:
SELECT * FROM "user_liked_songs"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

userLikedSongsHardDeleteOne:
DELETE FROM "user_liked_songs"
WHERE id = :id;

userLikedSongsSoftDeleteOne:
UPDATE "user_liked_songs" SET
deleted = true, synced = false
WHERE id = :id;

userLikedSongsRestoreSoftDeleteOne:
UPDATE "user_liked_songs" SET
deleted = false, synced = false
WHERE id = :id;

userLikedSongsHardDeleteMulti:
DELETE FROM "user_liked_songs"
WHERE id IN :ids;

userLikedSongsSoftDeleteMulti:
UPDATE "user_liked_songs" SET
deleted = true, synced = false
WHERE id IN :ids;

userLikedSongsRestoreSoftDeleteMulti:
UPDATE "user_liked_songs" SET
deleted = false, synced = false
WHERE id IN :ids;

userLikedSongsSetSyncStatusOne:
UPDATE "user_liked_songs" SET
synced = :value
WHERE id = :id;

userLikedSongsSetSyncStatusMulti:
UPDATE "user_liked_songs" SET
synced = :value
WHERE id IN :ids;

userLikedSongsInsert:
INSERT INTO "user_liked_songs" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "song_id"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :userId,
  :songId
) RETURNING *;

userLikedSongsInsertRecord(:data AS TEXT):
INSERT INTO "user_liked_songs" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "song_id"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.user_id'),
  json_extract(:data, '$.song_id')
) RETURNING *;

userLikedSongsUpdate:
UPDATE "user_liked_songs" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "user_id" = :userId,
  "song_id" = :songId
WHERE id = :id;

userLikedSongsUpdateRecord(:data AS TEXT):
UPDATE "user_liked_songs" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "user_id" = json_extract(:data, '$.user_id'),
  "song_id" = json_extract(:data, '$.song_id')
WHERE id = json_extract(:data, '$.id');

userFollowersGetAll:
SELECT * FROM "user_followers";

userFollowersGetOne:
SELECT * FROM "user_followers"
WHERE id = :id;

userFollowersGetUnsynced:
SELECT * FROM "user_followers"
WHERE synced = false;

userFollowersGetFreshest:
SELECT * FROM "user_followers"
WHERE synced = true
ORDER BY updated DESC
LIMIT 1;

userFollowersHardDeleteOne:
DELETE FROM "user_followers"
WHERE id = :id;

userFollowersSoftDeleteOne:
UPDATE "user_followers" SET
deleted = true, synced = false
WHERE id = :id;

userFollowersRestoreSoftDeleteOne:
UPDATE "user_followers" SET
deleted = false, synced = false
WHERE id = :id;

userFollowersHardDeleteMulti:
DELETE FROM "user_followers"
WHERE id IN :ids;

userFollowersSoftDeleteMulti:
UPDATE "user_followers" SET
deleted = true, synced = false
WHERE id IN :ids;

userFollowersRestoreSoftDeleteMulti:
UPDATE "user_followers" SET
deleted = false, synced = false
WHERE id IN :ids;

userFollowersSetSyncStatusOne:
UPDATE "user_followers" SET
synced = :value
WHERE id = :id;

userFollowersSetSyncStatusMulti:
UPDATE "user_followers" SET
synced = :value
WHERE id IN :ids;

userFollowersInsert:
INSERT INTO "user_followers" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "target_user_id"
)
VALUES(
  :id,
  :created,
  :updated,
  false,
  false,
  :fresh,
  :userId,
  :targetUserId
) RETURNING *;

userFollowersInsertRecord(:data AS TEXT):
INSERT INTO "user_followers" (
  "id",
  "created",
  "updated",
  "deleted",
  "synced",
  "fresh",
  "user_id",
  "target_user_id"
)
VALUES(
  json_extract(:data, '$.id'),
  json_extract(:data, '$.created'),
  json_extract(:data, '$.updated'),
  false,
  false,
  json_extract(:data, '$.fresh'),
  json_extract(:data, '$.user_id'),
  json_extract(:data, '$.target_user_id')
) RETURNING *;

userFollowersUpdate:
UPDATE "user_followers" SET
  "id" = :id,
  "created" = :created,
  "updated" = :updated,
  "deleted" = :deleted,
  "synced" = false,
  "fresh" = :fresh,
  "user_id" = :userId,
  "target_user_id" = :targetUserId
WHERE id = :id;

userFollowersUpdateRecord(:data AS TEXT):
UPDATE "user_followers" SET
  "id" = json_extract(:data, '$.id'),
  "created" = json_extract(:data, '$.created'),
  "updated" = json_extract(:data, '$.updated'),
  "deleted" = json_extract(:data, '$.deleted'),
  "synced" = false,
  "fresh" = json_extract(:data, '$.fresh'),
  "user_id" = json_extract(:data, '$.user_id'),
  "target_user_id" = json_extract(:data, '$.target_user_id')
WHERE id = json_extract(:data, '$.id');
