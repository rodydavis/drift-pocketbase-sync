import 'generated.dart';

-- Tables --

CREATE TABLE "users" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "username" TEXT,
    "email" TEXT NOT NULL,
    "emailVisibility" BOOLEAN,
    "verified" BOOLEAN,
    "name" TEXT,
    "avatar" TEXT,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH User;

CREATE TABLE "albums" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "name" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH Album;

CREATE TABLE "album_tracks" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "album_id" TEXT NOT NULL REFERENCES "albums" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "order" REAL NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH AlbumTrack;

CREATE TABLE "user_playlists" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "name" TEXT NOT NULL,
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH UserPlaylist;

CREATE TABLE "user_playlist_items" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "playlist_id" TEXT NOT NULL REFERENCES "user_playlists" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "order" REAL NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH UserPlaylistItem;

CREATE TABLE "songs" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "name" TEXT NOT NULL,
    "download_link" TEXT,
    "artist_id" TEXT REFERENCES "artists" (id),
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH Song;

CREATE TABLE "artists" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "username" TEXT,
    "email" TEXT NOT NULL,
    "emailVisibility" BOOLEAN,
    "verified" BOOLEAN,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH Artist;

CREATE TABLE "user_liked_songs" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "song_id" TEXT NOT NULL REFERENCES "songs" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH UserLikedSong;

CREATE TABLE "user_followers" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "target_user_id" TEXT NOT NULL REFERENCES "users" (id) ON DELETE CASCADE ON UPDATE CASCADE,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH UserFollower;

CREATE TABLE "changes" (
    "id" TEXT NOT NULL PRIMARY KEY DEFAULT (newId()),
    "collection_id" TEXT NOT NULL,
    "collection_name" TEXT,
    "record_id" TEXT NOT NULL,
    "record_data" TEXT,
    "action" TEXT NOT NULL,
    "created" DATETIME NOT NULL,
    "updated" DATETIME NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT (false),
    "synced" BOOLEAN NOT NULL DEFAULT (false),
    "fresh" BOOLEAN NOT NULL DEFAULT (true)
) WITH Chang;

-- Indexes --

-- Queries --

usersGetAll:
SELECT * FROM "users";

usersGetOne:
SELECT * FROM "users"
WHERE id = :id;

usersHardDeleteOne:
DELETE FROM "users"
WHERE id = :id;

usersSoftDeleteOne:
UPDATE "users" SET
deleted = true, synced = false
WHERE id = :id;

usersRestoreSoftDeleteOne:
UPDATE "users" SET
deleted = false, synced = false
WHERE id = :id;

usersHardDeleteMulti:
DELETE FROM "users"
WHERE id IN :ids;

usersSoftDeleteMulti:
UPDATE "users" SET
deleted = true, synced = false
WHERE id IN :ids;

usersRestoreSoftDeleteMulti:
UPDATE "users" SET
deleted = false, synced = false
WHERE id IN :ids;

usersSetSyncStatusOne:
UPDATE "users" SET
synced = :value
WHERE id = :id;

usersSetSyncStatusMulti:
UPDATE "users" SET
synced = :value
WHERE id IN :ids;

usersInsert:
INSERT INTO "users" (
  "username",
  "email",
  "emailVisibility",
  "verified",
  "name",
  "avatar",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :username,
  :email,
  :emailVisibility,
  :verified,
  :name,
  :avatar,
  false,
  true,
  now(),
  now()
) RETURNING *;

usersInsertWithId:
INSERT OR REPLACE INTO "users" (
  id,
  "username",
  "email",
  "emailVisibility",
  "verified",
  "name",
  "avatar",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :username,
  :email,
  :emailVisibility,
  :verified,
  :name,
  :avatar,
  false,
  true,
  now(),
  now()
) RETURNING *;

usersUpdate:
UPDATE "users" SET
  "username" = :username,
  "email" = :email,
  "emailVisibility" = :emailVisibility,
  "verified" = :verified,
  "name" = :name,
  "avatar" = :avatar,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

albumsGetAll:
SELECT * FROM "albums";

albumsGetOne:
SELECT * FROM "albums"
WHERE id = :id;

albumsGetUnsynced:
SELECT * FROM "albums"
WHERE synced = false;

albumsHardDeleteOne:
DELETE FROM "albums"
WHERE id = :id;

albumsSoftDeleteOne:
UPDATE "albums" SET
deleted = true, synced = false
WHERE id = :id;

albumsRestoreSoftDeleteOne:
UPDATE "albums" SET
deleted = false, synced = false
WHERE id = :id;

albumsHardDeleteMulti:
DELETE FROM "albums"
WHERE id IN :ids;

albumsSoftDeleteMulti:
UPDATE "albums" SET
deleted = true, synced = false
WHERE id IN :ids;

albumsRestoreSoftDeleteMulti:
UPDATE "albums" SET
deleted = false, synced = false
WHERE id IN :ids;

albumsSetSyncStatusOne:
UPDATE "albums" SET
synced = :value
WHERE id = :id;

albumsSetSyncStatusMulti:
UPDATE "albums" SET
synced = :value
WHERE id IN :ids;

albumsInsert:
INSERT INTO "albums" (
  "name",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :name,
  false,
  true,
  now(),
  now()
) RETURNING *;

albumsInsertWithId:
INSERT OR REPLACE INTO "albums" (
  id,
  "name",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :name,
  false,
  true,
  now(),
  now()
) RETURNING *;

albumsUpdate:
UPDATE "albums" SET
  "name" = :name,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

albumTracksGetAll:
SELECT * FROM "album_tracks";

albumTracksGetOne:
SELECT * FROM "album_tracks"
WHERE id = :id;

albumTracksGetUnsynced:
SELECT * FROM "album_tracks"
WHERE synced = false;

albumTracksHardDeleteOne:
DELETE FROM "album_tracks"
WHERE id = :id;

albumTracksSoftDeleteOne:
UPDATE "album_tracks" SET
deleted = true, synced = false
WHERE id = :id;

albumTracksRestoreSoftDeleteOne:
UPDATE "album_tracks" SET
deleted = false, synced = false
WHERE id = :id;

albumTracksHardDeleteMulti:
DELETE FROM "album_tracks"
WHERE id IN :ids;

albumTracksSoftDeleteMulti:
UPDATE "album_tracks" SET
deleted = true, synced = false
WHERE id IN :ids;

albumTracksRestoreSoftDeleteMulti:
UPDATE "album_tracks" SET
deleted = false, synced = false
WHERE id IN :ids;

albumTracksSetSyncStatusOne:
UPDATE "album_tracks" SET
synced = :value
WHERE id = :id;

albumTracksSetSyncStatusMulti:
UPDATE "album_tracks" SET
synced = :value
WHERE id IN :ids;

albumTracksInsert:
INSERT INTO "album_tracks" (
  "album_id",
  "song_id",
  "order",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :albumId,
  :songId,
  :order,
  false,
  true,
  now(),
  now()
) RETURNING *;

albumTracksInsertWithId:
INSERT OR REPLACE INTO "album_tracks" (
  id,
  "album_id",
  "song_id",
  "order",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :albumId,
  :songId,
  :order,
  false,
  true,
  now(),
  now()
) RETURNING *;

albumTracksUpdate:
UPDATE "album_tracks" SET
  "album_id" = :albumId,
  "song_id" = :songId,
  "order" = :order,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

albumTracksGetByAlbumId:
SELECT * FROM "album_tracks" 
WHERE "album_id" = :albumId;

albumTracksGetBySongId:
SELECT * FROM "album_tracks" 
WHERE "song_id" = :songId;

userPlaylistsGetAll:
SELECT * FROM "user_playlists";

userPlaylistsGetOne:
SELECT * FROM "user_playlists"
WHERE id = :id;

userPlaylistsGetUnsynced:
SELECT * FROM "user_playlists"
WHERE synced = false;

userPlaylistsHardDeleteOne:
DELETE FROM "user_playlists"
WHERE id = :id;

userPlaylistsSoftDeleteOne:
UPDATE "user_playlists" SET
deleted = true, synced = false
WHERE id = :id;

userPlaylistsRestoreSoftDeleteOne:
UPDATE "user_playlists" SET
deleted = false, synced = false
WHERE id = :id;

userPlaylistsHardDeleteMulti:
DELETE FROM "user_playlists"
WHERE id IN :ids;

userPlaylistsSoftDeleteMulti:
UPDATE "user_playlists" SET
deleted = true, synced = false
WHERE id IN :ids;

userPlaylistsRestoreSoftDeleteMulti:
UPDATE "user_playlists" SET
deleted = false, synced = false
WHERE id IN :ids;

userPlaylistsSetSyncStatusOne:
UPDATE "user_playlists" SET
synced = :value
WHERE id = :id;

userPlaylistsSetSyncStatusMulti:
UPDATE "user_playlists" SET
synced = :value
WHERE id IN :ids;

userPlaylistsInsert:
INSERT INTO "user_playlists" (
  "name",
  "user_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :name,
  :userId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userPlaylistsInsertWithId:
INSERT OR REPLACE INTO "user_playlists" (
  id,
  "name",
  "user_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :name,
  :userId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userPlaylistsUpdate:
UPDATE "user_playlists" SET
  "name" = :name,
  "user_id" = :userId,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

userPlaylistsGetByUserId:
SELECT * FROM "user_playlists" 
WHERE "user_id" = :userId;

userPlaylistItemsGetAll:
SELECT * FROM "user_playlist_items";

userPlaylistItemsGetOne:
SELECT * FROM "user_playlist_items"
WHERE id = :id;

userPlaylistItemsGetUnsynced:
SELECT * FROM "user_playlist_items"
WHERE synced = false;

userPlaylistItemsHardDeleteOne:
DELETE FROM "user_playlist_items"
WHERE id = :id;

userPlaylistItemsSoftDeleteOne:
UPDATE "user_playlist_items" SET
deleted = true, synced = false
WHERE id = :id;

userPlaylistItemsRestoreSoftDeleteOne:
UPDATE "user_playlist_items" SET
deleted = false, synced = false
WHERE id = :id;

userPlaylistItemsHardDeleteMulti:
DELETE FROM "user_playlist_items"
WHERE id IN :ids;

userPlaylistItemsSoftDeleteMulti:
UPDATE "user_playlist_items" SET
deleted = true, synced = false
WHERE id IN :ids;

userPlaylistItemsRestoreSoftDeleteMulti:
UPDATE "user_playlist_items" SET
deleted = false, synced = false
WHERE id IN :ids;

userPlaylistItemsSetSyncStatusOne:
UPDATE "user_playlist_items" SET
synced = :value
WHERE id = :id;

userPlaylistItemsSetSyncStatusMulti:
UPDATE "user_playlist_items" SET
synced = :value
WHERE id IN :ids;

userPlaylistItemsInsert:
INSERT INTO "user_playlist_items" (
  "playlist_id",
  "user_id",
  "song_id",
  "order",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :playlistId,
  :userId,
  :songId,
  :order,
  false,
  true,
  now(),
  now()
) RETURNING *;

userPlaylistItemsInsertWithId:
INSERT OR REPLACE INTO "user_playlist_items" (
  id,
  "playlist_id",
  "user_id",
  "song_id",
  "order",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :playlistId,
  :userId,
  :songId,
  :order,
  false,
  true,
  now(),
  now()
) RETURNING *;

userPlaylistItemsUpdate:
UPDATE "user_playlist_items" SET
  "playlist_id" = :playlistId,
  "user_id" = :userId,
  "song_id" = :songId,
  "order" = :order,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

userPlaylistItemsGetByPlaylistId:
SELECT * FROM "user_playlist_items" 
WHERE "playlist_id" = :playlistId;

userPlaylistItemsGetByUserId:
SELECT * FROM "user_playlist_items" 
WHERE "user_id" = :userId;

userPlaylistItemsGetBySongId:
SELECT * FROM "user_playlist_items" 
WHERE "song_id" = :songId;

songsGetAll:
SELECT * FROM "songs";

songsGetOne:
SELECT * FROM "songs"
WHERE id = :id;

songsGetUnsynced:
SELECT * FROM "songs"
WHERE synced = false;

songsHardDeleteOne:
DELETE FROM "songs"
WHERE id = :id;

songsSoftDeleteOne:
UPDATE "songs" SET
deleted = true, synced = false
WHERE id = :id;

songsRestoreSoftDeleteOne:
UPDATE "songs" SET
deleted = false, synced = false
WHERE id = :id;

songsHardDeleteMulti:
DELETE FROM "songs"
WHERE id IN :ids;

songsSoftDeleteMulti:
UPDATE "songs" SET
deleted = true, synced = false
WHERE id IN :ids;

songsRestoreSoftDeleteMulti:
UPDATE "songs" SET
deleted = false, synced = false
WHERE id IN :ids;

songsSetSyncStatusOne:
UPDATE "songs" SET
synced = :value
WHERE id = :id;

songsSetSyncStatusMulti:
UPDATE "songs" SET
synced = :value
WHERE id IN :ids;

songsInsert:
INSERT INTO "songs" (
  "name",
  "download_link",
  "artist_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :name,
  :downloadLink,
  :artistId,
  false,
  true,
  now(),
  now()
) RETURNING *;

songsInsertWithId:
INSERT OR REPLACE INTO "songs" (
  id,
  "name",
  "download_link",
  "artist_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :name,
  :downloadLink,
  :artistId,
  false,
  true,
  now(),
  now()
) RETURNING *;

songsUpdate:
UPDATE "songs" SET
  "name" = :name,
  "download_link" = :downloadLink,
  "artist_id" = :artistId,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

songsGetByArtistId:
SELECT * FROM "songs" 
WHERE "artist_id" = :artistId;

artistsGetAll:
SELECT * FROM "artists";

artistsGetOne:
SELECT * FROM "artists"
WHERE id = :id;

artistsHardDeleteOne:
DELETE FROM "artists"
WHERE id = :id;

artistsSoftDeleteOne:
UPDATE "artists" SET
deleted = true, synced = false
WHERE id = :id;

artistsRestoreSoftDeleteOne:
UPDATE "artists" SET
deleted = false, synced = false
WHERE id = :id;

artistsHardDeleteMulti:
DELETE FROM "artists"
WHERE id IN :ids;

artistsSoftDeleteMulti:
UPDATE "artists" SET
deleted = true, synced = false
WHERE id IN :ids;

artistsRestoreSoftDeleteMulti:
UPDATE "artists" SET
deleted = false, synced = false
WHERE id IN :ids;

artistsSetSyncStatusOne:
UPDATE "artists" SET
synced = :value
WHERE id = :id;

artistsSetSyncStatusMulti:
UPDATE "artists" SET
synced = :value
WHERE id IN :ids;

artistsInsert:
INSERT INTO "artists" (
  "username",
  "email",
  "emailVisibility",
  "verified",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :username,
  :email,
  :emailVisibility,
  :verified,
  false,
  true,
  now(),
  now()
) RETURNING *;

artistsInsertWithId:
INSERT OR REPLACE INTO "artists" (
  id,
  "username",
  "email",
  "emailVisibility",
  "verified",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :username,
  :email,
  :emailVisibility,
  :verified,
  false,
  true,
  now(),
  now()
) RETURNING *;

artistsUpdate:
UPDATE "artists" SET
  "username" = :username,
  "email" = :email,
  "emailVisibility" = :emailVisibility,
  "verified" = :verified,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

userLikedSongsGetAll:
SELECT * FROM "user_liked_songs";

userLikedSongsGetOne:
SELECT * FROM "user_liked_songs"
WHERE id = :id;

userLikedSongsGetUnsynced:
SELECT * FROM "user_liked_songs"
WHERE synced = false;

userLikedSongsHardDeleteOne:
DELETE FROM "user_liked_songs"
WHERE id = :id;

userLikedSongsSoftDeleteOne:
UPDATE "user_liked_songs" SET
deleted = true, synced = false
WHERE id = :id;

userLikedSongsRestoreSoftDeleteOne:
UPDATE "user_liked_songs" SET
deleted = false, synced = false
WHERE id = :id;

userLikedSongsHardDeleteMulti:
DELETE FROM "user_liked_songs"
WHERE id IN :ids;

userLikedSongsSoftDeleteMulti:
UPDATE "user_liked_songs" SET
deleted = true, synced = false
WHERE id IN :ids;

userLikedSongsRestoreSoftDeleteMulti:
UPDATE "user_liked_songs" SET
deleted = false, synced = false
WHERE id IN :ids;

userLikedSongsSetSyncStatusOne:
UPDATE "user_liked_songs" SET
synced = :value
WHERE id = :id;

userLikedSongsSetSyncStatusMulti:
UPDATE "user_liked_songs" SET
synced = :value
WHERE id IN :ids;

userLikedSongsInsert:
INSERT INTO "user_liked_songs" (
  "user_id",
  "song_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :userId,
  :songId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userLikedSongsInsertWithId:
INSERT OR REPLACE INTO "user_liked_songs" (
  id,
  "user_id",
  "song_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :userId,
  :songId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userLikedSongsUpdate:
UPDATE "user_liked_songs" SET
  "user_id" = :userId,
  "song_id" = :songId,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

userLikedSongsGetByUserId:
SELECT * FROM "user_liked_songs" 
WHERE "user_id" = :userId;

userLikedSongsGetBySongId:
SELECT * FROM "user_liked_songs" 
WHERE "song_id" = :songId;

userFollowersGetAll:
SELECT * FROM "user_followers";

userFollowersGetOne:
SELECT * FROM "user_followers"
WHERE id = :id;

userFollowersGetUnsynced:
SELECT * FROM "user_followers"
WHERE synced = false;

userFollowersHardDeleteOne:
DELETE FROM "user_followers"
WHERE id = :id;

userFollowersSoftDeleteOne:
UPDATE "user_followers" SET
deleted = true, synced = false
WHERE id = :id;

userFollowersRestoreSoftDeleteOne:
UPDATE "user_followers" SET
deleted = false, synced = false
WHERE id = :id;

userFollowersHardDeleteMulti:
DELETE FROM "user_followers"
WHERE id IN :ids;

userFollowersSoftDeleteMulti:
UPDATE "user_followers" SET
deleted = true, synced = false
WHERE id IN :ids;

userFollowersRestoreSoftDeleteMulti:
UPDATE "user_followers" SET
deleted = false, synced = false
WHERE id IN :ids;

userFollowersSetSyncStatusOne:
UPDATE "user_followers" SET
synced = :value
WHERE id = :id;

userFollowersSetSyncStatusMulti:
UPDATE "user_followers" SET
synced = :value
WHERE id IN :ids;

userFollowersInsert:
INSERT INTO "user_followers" (
  "user_id",
  "target_user_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :userId,
  :targetUserId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userFollowersInsertWithId:
INSERT OR REPLACE INTO "user_followers" (
  id,
  "user_id",
  "target_user_id",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :userId,
  :targetUserId,
  false,
  true,
  now(),
  now()
) RETURNING *;

userFollowersUpdate:
UPDATE "user_followers" SET
  "user_id" = :userId,
  "target_user_id" = :targetUserId,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;

userFollowersGetByUserId:
SELECT * FROM "user_followers" 
WHERE "user_id" = :userId;

userFollowersGetByTargetUserId:
SELECT * FROM "user_followers" 
WHERE "target_user_id" = :targetUserId;

changesGetAll:
SELECT * FROM "changes";

changesGetOne:
SELECT * FROM "changes"
WHERE id = :id;

changesGetUnsynced:
SELECT * FROM "changes"
WHERE synced = false;

changesHardDeleteOne:
DELETE FROM "changes"
WHERE id = :id;

changesSoftDeleteOne:
UPDATE "changes" SET
deleted = true, synced = false
WHERE id = :id;

changesRestoreSoftDeleteOne:
UPDATE "changes" SET
deleted = false, synced = false
WHERE id = :id;

changesHardDeleteMulti:
DELETE FROM "changes"
WHERE id IN :ids;

changesSoftDeleteMulti:
UPDATE "changes" SET
deleted = true, synced = false
WHERE id IN :ids;

changesRestoreSoftDeleteMulti:
UPDATE "changes" SET
deleted = false, synced = false
WHERE id IN :ids;

changesSetSyncStatusOne:
UPDATE "changes" SET
synced = :value
WHERE id = :id;

changesSetSyncStatusMulti:
UPDATE "changes" SET
synced = :value
WHERE id IN :ids;

changesInsert:
INSERT INTO "changes" (
  "collection_id",
  "collection_name",
  "record_id",
  "record_data",
  "action",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :collectionId,
  :collectionName,
  :recordId,
  :recordData,
  :action,
  false,
  true,
  now(),
  now()
) RETURNING *;

changesInsertWithId:
INSERT OR REPLACE INTO "changes" (
  id,
  "collection_id",
  "collection_name",
  "record_id",
  "record_data",
  "action",
  synced,
  fresh,
  created,
  updated
)
VALUES(
  :id,
  :collectionId,
  :collectionName,
  :recordId,
  :recordData,
  :action,
  false,
  true,
  now(),
  now()
) RETURNING *;

changesUpdate:
UPDATE "changes" SET
  "collection_id" = :collectionId,
  "collection_name" = :collectionName,
  "record_id" = :recordId,
  "record_data" = :recordData,
  "action" = :action,
  synced = false,
  fresh = false,
  updated = now()
WHERE id = :id;
